
# Lex rule:

Lex = WS / Ident / EnumConst / Num / LParen / RParen / Eq / Semi / Dot;

LParen = '('; 
RParen = ')'; 
Eq = '=';
Semi = ';';
Dot = '.';
Digit = [0-9];

WS = (' ' / '\t' / '\n' / '\r' / '\f')+;

Ident = [a-zA-Z_][a-zA-Z0-9_]*;

EnumConst = '#' Ident;

Num = Digit+ / Digit* Dot Digit+ [fF]?;

# Post-lex grammar:

Program = ^ WS Import+ statement:Statement+;

Import = "import" WS import:Package WS Semi;

Package = Ident (Dot Package)?;

Statement = Ident WS Eq WS Expr WS Semi;

Expr[5] = '(' WS Expr WS ')';

Expr[4] = Ident / EnumConst / Num;

Expr[3] = '-'+ Expr;

Expr[2] = Expr WS (('*' / '/') WS Expr)+;

Expr[1] = Expr WS (('+' / '-') WS Expr)+;

