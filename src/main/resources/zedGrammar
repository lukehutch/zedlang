
# Lex rule:

# Import has to come before Ident because Ident matches "import"
Lex = Keyword / Ident / EnumConst / Num / Parens / ArithOp / Comparison / SyntaxChar / WS;

Keyword = "import" / "if" / "then";
Ident = ident:([a-zA-Z_][a-zA-Z0-9_]*);
EnumConst = enumConst:('#' Ident);
Num = num:(Digit+ / Digit* '.' Digit+ [fF]?);
Digit = [0-9];
Parens = '(' / ')' / '[' / ']' / '{' / '}';
ArithOp = '+' / '-' / '*' / '/';
Comparison = "==" / "!=" / '>' / ">=" / '<' / "<=";
SyntaxChar = '=' / ';' / '.';

# Don't match zero or more whitespace chars in Lex rule, so that we can see where lex fails 
W = (' ' / '\t' / '\n' / '\r' / '\f');
WS = W*;

# Post-lex grammar:

Program = ^ WS (ImportStatement)* (Assignment)+;

ImportStatement = "import" WS import:Package WS ';' WS;

Package = Ident ('.' Package)?;

Assignment = assign:(lvalue:Ident WS '=' WS Expr WS ';' WS);

Accessor = Accessor WS (('[' WS lookup:Expr WS ']') WS / ('.' WS dot:Accessor WS))+ / Ident;

Block = '{' WS Assignment* WS '}';

Expr[6] = '(' WS Expr WS ')';

Expr[5] = accessor:Accessor / EnumConst / Num;

Expr[4] = if:("if" WS Expr WS then:Block WS ("else" WS else:Block)?);

Expr[3] = arith:((op:'-' WS)+ Expr);

Expr[2] = arith:(Expr WS (op:('*' / '/') WS Expr WS)+);

Expr[1] = arith:(Expr WS (op:('+' / '-') WS Expr WS)+);

Expr[0] = arith:(Expr WS (op:Comparison WS Expr WS)+);