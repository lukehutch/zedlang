
# Lex rule:

# Import has to come before Ident because Ident matches "import"
Lex = Import / Ident / EnumConst / Num / LParen / RParen / LBracket / RBracket / Eq / Semi / Dot / ArithOp / W;

Import = "import";
Ident = ident:([a-zA-Z_][a-zA-Z0-9_]*);
EnumConst = enumConst:('#' Ident);
Num = num:(Digit+ / Digit* Dot Digit+ [fF]?);
LParen = '('; 
RParen = ')'; 
Eq = '=';
Semi = ';';
Dot = '.';
LBracket = '[';
RBracket = ')';
ArithOp = '+' / '-' / '*' / '/';
Digit = [0-9];

# Don't match zero or more whitespace chars in Lex rule, so that we can see where lex fails 
W = (' ' / '\t' / '\n' / '\r' / '\f');
WS = W*;

# Post-lex grammar:

Program = ^ WS (ImportStatement)* (Assignment)+;

ImportStatement = Import WS import:Package WS Semi WS;

Package = Ident (Dot Package)?;

Assignment = assign:(lvalue:Ident WS Eq WS Expr WS Semi WS);

Accessor = Accessor WS (('[' WS lookup:Expr WS ']') WS / ('.' WS dot:Accessor WS))+ / Ident;

Expr[5] = '(' WS Expr WS ')';

Expr[4] = accessor:Accessor / EnumConst / Num;

Expr[3] = arith:((op:'-' WS)+ Expr);

Expr[2] = arith:(Expr WS (op:('*' / '/') WS Expr WS)+);

Expr[1] = arith:(Expr WS (op:('+' / '-') WS Expr WS)+);

