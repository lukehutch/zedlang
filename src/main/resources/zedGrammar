
# Lex rule:

Lex = WS | Ident | EnumConst | Num | LParen | RParen | Eq | Semi | Dot;

WS = (' ' | '\t' | '\n' | '\r' | '\f')+;

Ident = [a-zA-Z_][a-zA-Z0-9_]*;

EnumConst = '#' Ident;

Num = [0-9]+ | ([0-9]+? '.' [0-9]+ [fFdD]?);

LParen = '('; 
RParen = ')'; 
Eq = '=';
Semi = ';';
Dot = '.';

# Post-lex grammar:

Program = ^ WS Import+ (statement:Statement)+;

Import = "import" WS import:Package WS Semi;

Package = Ident (Dot Package)?;

Statement = Ident WS Eq WS Expr WS Semi;

Expr = Term 

Term = Ident | EnumConst | Num;

